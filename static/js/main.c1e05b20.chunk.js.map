{"version":3,"sources":["logo.svg","AppStore.js","Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","shortid","require","ObservablePageStore","title","subTitle","textColour","backColour","this","pageList","push","key","generate","keyIn","localKeyArr","find","localTitle","localSubTitle","localTextColour","localBackColour","observable","pageListTest","action","LeftCard","observer","store","props","className","style","height","width","backgroundColor","color","testKeyArr","Component","RightCard","handleChangeTitle","e","target","value","handleChangeSubTitle","handleChangeTextColour","hex","handleChangeBackColour","handleChangeKey","localKey","onChangePage","changePage","onNewPage","preventDefault","addPage","marginLeft","marginTop","label","name","id","size","required","onChange","onClick","App","sm","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1e05b20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\n//mobx\r\nimport { observable, autorun, action, computed } from 'mobx';\r\n\r\nvar shortid = require('shortid');\r\n\r\nclass Store {\r\n\r\n\r\n\r\n    //Test List\r\n    @observable pageListTest = [\r\n        {key: 0, title: \"Title\", subTitle: \"subTitle\"},\r\n        {key: 1, title: \"Title2\", subTitle: \"subTitle2\"},\r\n        {key: 2, title: \"Title3\", subTitle: \"subTitle3\", backColour:\"#cccccc\", textColour:\"#ffffff\"}\r\n    ];\r\n\r\n    @observable testKeyArr = this.pageListTest.find(pageListTest => pageListTest.key === 0)\r\n\r\n    //Initialization of page list\r\n    @observable pageList = [];\r\n\r\n    @action addPage(title, subTitle, textColour, backColour) {\r\n        this.pageList.push({\r\n            key: shortid.generate(),\r\n            title: title,\r\n            subTitle: subTitle,\r\n            textColour: textColour,\r\n            backColour: backColour\r\n        });\r\n    }\r\n\r\n    //Local render data\r\n    @observable localTitle = '';\r\n\r\n    @observable localSubTitle = '';\r\n\r\n    @observable localTextColour = '';\r\n\r\n    @observable localBackColour = '';\r\n\r\n\r\n\r\n    //Page change\r\n    @observable localKey = '';\r\n\r\n    @observable localKeyArr = '';\r\n\r\n    @action changePage(keyIn) {\r\n\r\n        this.localKeyArr = this.pageList.find(pageList => pageList.key === keyIn)\r\n\r\n        this.localTitle = this.localKeyArr.title;\r\n\r\n        this.localSubTitle = this.localKeyArr.subTitle;\r\n\r\n        this.localTextColour = this.localKeyArr.textColour;\r\n\r\n        this.localBackColour = this.localKeyArr.backColour\r\n    }\r\n}\r\n\r\nconst ObservablePageStore = new Store()\r\n\r\nexport {\r\n    ObservablePageStore\r\n}","import React, { Component } from 'react';\r\n\r\n//ui elements\r\nimport { Card, Row, Col } from 'react-bootstrap';\r\n\r\nimport { CompactPicker } from 'react-color';\r\n\r\nimport './PageComp.css';\r\n\r\nimport {\r\nMDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler,\r\nMDBCollapse, MDBFormInline, MDBDropdown, MDBDropdownToggle, MDBDropdownMenu,\r\nMDBDropdownItem, MDBBtn, MDBIcon, MDBCol, p, MDBCardText, MDBCardTitle, MDBCardImage,\r\nMDBCardBody, MDBCard, MDBPagination, MDBPageItem, MDBPageNav, MDBRow, MDBInput, small\r\n} from 'mdbreact';\r\n\r\n//mobx\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { action } from 'mobx';\r\n\r\nimport { ObservablePageStore } from './AppStore';\r\n\r\n//Left Card\r\n@observer\r\nclass LeftCard extends Component {\r\n\r\n    render () {\r\n\r\n        const store = this.props.store;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <div className='card' style={{height: \"50rem\", width: \"30rem\", backgroundColor:store.localBackColour}}>\r\n\r\n                    <p className='title1' style={{color:store.localTextColour}}>{store.localTitle}</p>\r\n\r\n                    <p className='title1' style={{color:store.localTextColour}}>{store.localSubTitle}</p>\r\n\r\n                    <p className='title1'>{store.pageListTest[0].title}</p>\r\n\r\n                    <p className='title1'>{store.testKeyArr.subTitle}</p>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n//Right Card\r\n@observer\r\nclass RightCard extends Component {\r\n\r\n    handleChangeTitle = (e) => {\r\n        this.props.store.localTitle = e.target.value;\r\n    };\r\n\r\n    handleChangeSubTitle = (e) => {\r\n        this.props.store.localSubTitle = e.target.value;\r\n    };\r\n\r\n    handleChangeTextColour = (e) => {\r\n        this.props.store.localTextColour = e.hex;\r\n    };\r\n\r\n    handleChangeBackColour = (e) => {\r\n        this.props.store.localBackColour = e.hex;\r\n    };\r\n\r\n    handleChangeKey = (e) => {\r\n        this.props.store.localKey = e.target.value;\r\n    };\r\n\r\n    render () {\r\n        const store = this.props.store;\r\n        return (\r\n            <div>\r\n                <div className='card' style={{height: \"50rem\", width: \"30rem\"}}>\r\n                    <form  style={{marginLeft: \"7rem\", marginTop: \"2rem\"}}>\r\n                        <MDBInput\r\n                            label=\"Title\"\r\n                            name=\"title\"\r\n                            id=\"title\"\r\n                            size=\"lg\"\r\n                            required\r\n                            value={store.localTitle}\r\n                            onChange={this.handleChangeTitle}\r\n\r\n                        />\r\n\r\n                        <p className='inputLabel3'>Less than 100 characters</p>\r\n\r\n                        <p className='inputLabel1'>Background Colour</p>\r\n\r\n                        <CompactPicker\r\n                            onChange={this.handleChangeBackColour}\r\n                        />\r\n\r\n                        <MDBInput\r\n                            label=\"Subtitle\"\r\n                            name=\"subTitle\"\r\n                            id=\"subTitle\"\r\n                            size=\"lg\"\r\n                            required\r\n                            value={store.localSubTitle}\r\n                            onChange={this.handleChangeSubTitle}\r\n\r\n                        />\r\n\r\n\r\n                        <p className='inputLabel1'>Text Colour</p>\r\n\r\n                        <CompactPicker\r\n                            onChange={this.handleChangeTextColour}\r\n                        />\r\n\r\n                        <MDBInput\r\n                            label=\"Select Page\"\r\n                            name=\"keyLoader\"\r\n                            id=\"keyLoader\"\r\n                            size=\"lg\"\r\n                            required\r\n                            value={store.localKey}\r\n                            onChange={this.handleChangeKey}\r\n\r\n                        />\r\n\r\n\r\n                        <div style={{marginTop: \"3rem\"}}>\r\n                            <MDBBtn onClick={ this.onChangePage }> Change Page </MDBBtn>\r\n\r\n                            <MDBBtn onClick={ this.onNewPage }> Submit </MDBBtn>\r\n                        </div>\r\n\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onChangePage = (e) => {\r\n        this.props.store.changePage(this.props.store.localKey);\r\n    }\r\n\r\n    onNewPage = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.props.store.addPage(this.props.store.localTitle, this.props.store.localSubTitle,\r\n                                 this.props.store.localTextColour, this.props.store.localBackColour);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    LeftCard,\r\n    RightCard\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { LeftCard, RightCard } from './Cards';\nimport { ObservablePageStore } from './AppStore';\n\nimport {\n         Row,\n         Col\n        } from 'react-bootstrap';\n\nimport {\n         MDBCol,\n         MDBRow,\n         MDBContainer\n       } from 'mdbreact';\n\n\nfunction App() {\n    return (\n        <MDBContainer>\n            <MDBRow>\n                <MDBCol sm={5} style={{ marginTop: \"1rem\", margin: \"2.5rem\"}}><LeftCard store={ ObservablePageStore } /></MDBCol>\n                <MDBCol sm={5} style={{ marginTop: \"1rem\", margin: \"2.5rem\"}}><RightCard store={ ObservablePageStore } /></MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}